env:
  GO111MODULE: "on"
  GOFLAGS: "-mod=mod"
  CGO_ENABLED: "0"
  # DOCKERHUB_USERNAME / DOCKERHUB_TOKEN must be set in Buildkite UI or secret manager

steps:
  - label: ":pencil: Check Environment Variables"
    command: |
      set -euo pipefail
      echo "--- Environment Variables"
      # Validate presence without printing secrets
      test -n "${DOCKERHUB_USERNAME:-}" || { echo "DOCKERHUB_USERNAME missing"; exit 1; }
      test -n "${DOCKERHUB_TOKEN:-}"    || { echo "DOCKERHUB_TOKEN missing"; exit 1; }
      echo "âœ“ Secrets are present (not printing values)"
      echo "--- Pipeline: $BUILDKITE_PIPELINE_SLUG / Org: $BUILDKITE_ORGANIZATION_SLUG"

  - label: ":docker: Build Services"
    command: |
      set -euo pipefail
      echo "--- Docker login (pre-build)"
      printf %s "$DOCKERHUB_TOKEN" | docker login -u "$DOCKERHUB_USERNAME" --password-stdin
      echo "--- Enable BuildKit"
      export DOCKER_BUILDKIT=1
      # If on Apple Silicon, uncomment to ensure amd64 images:
      # export DOCKER_DEFAULT_PLATFORM=linux/amd64
      echo "--- Building services (compose)"
      docker-compose -f docker-compose.ci.yml build --parallel

  - label: ":go: Test Services"
    command: |
      set -euo pipefail
      echo "--- Docker login (pre-test)"
      printf %s "$DOCKERHUB_TOKEN" | docker login -u "$DOCKERHUB_USERNAME" --password-stdin
      echo "--- Build images (ensure present)"
      docker-compose -f docker-compose.ci.yml build

      echo "--- Starting MySQL"
      docker-compose -f docker-compose.ci.yml up -d mysql
      echo "--- Waiting for MySQL"
      sleep 30

      mkdir -p test-results

      echo "--- Running Order Service tests"
      docker run --rm \
        --network container:buildkite-secure-pipeline-mysql-1 \
        -e DB_HOST=localhost -e DB_PORT=3306 -e DB_USER=user -e DB_PASSWORD=password -e DB_NAME=orders \
        -v "$(pwd)/test-results:/test-results" \
        buildkite-secure-pipeline-order \
        sh -c "cd /app && go test -v ./... | tee /test-results/order-test-output.txt" || echo "Order tests failed but continuing..."

      echo "--- Running Payment Service tests"
      docker run --rm \
        --network container:buildkite-secure-pipeline-mysql-1 \
        -e DB_HOST=localhost -e DB_PORT=3306 -e DB_USER=user -e DB_PASSWORD=password -e DB_NAME=payments \
        -v "$(pwd)/test-results:/test-results" \
        buildkite-secure-pipeline-payment \
        sh -c "cd /app && go test -v ./... | tee /test-results/payment-test-output.txt" || echo "Payment tests failed but continuing..."

      echo "--- Test Results"
      cat test-results/*.txt || true

      echo "--- Cleaning up"
      docker-compose -f docker-compose.ci.yml down -v

  - label: ":docker: Push to Docker Hub"
    if: build.branch == "main"
    command: |
      set -euo pipefail
      echo "--- Docker login (pre-push)"
      printf %s "$DOCKERHUB_TOKEN" | docker login -u "$DOCKERHUB_USERNAME" --password-stdin

      TAG="${BUILDKITE_COMMIT:0:7}"
      echo "--- Tagging"
      docker tag buildkite-secure-pipeline-order    hackermonk/order:${TAG}
      docker tag buildkite-secure-pipeline-payment  hackermonk/payment:${TAG}
      docker tag buildkite-secure-pipeline-order    hackermonk/order:latest
      docker tag buildkite-secure-pipeline-payment  hackermonk/payment:latest

      echo "--- Pushing images"
      docker push hackermonk/order:${TAG}
      docker push hackermonk/payment:${TAG}
      docker push hackermonk/order:latest
      docker push hackermonk/payment:latest

  - label: ":kubernetes: Create Docker Hub Secret"
    if: build.branch == "main"
    command: |
      set -euo pipefail
      echo "--- Creating/Updating docker-registry secret"
      kubectl create secret docker-registry dockerhub-credentials \
        --docker-server=https://index.docker.io/v1/ \
        --docker-username="$DOCKERHUB_USERNAME" \
        --docker-password="$DOCKERHUB_TOKEN" \
        --dry-run=client -o yaml | kubectl apply -f -

  - label: ":kubernetes: Deploy to Local K8s"
    if: build.branch == "main"
    command: |
      set -euo pipefail
      echo "--- Tools"
      if command -v envsubst >/dev/null 2>&1; then
        echo "envsubst present"
      else
        echo "envsubst missing; attempting install"
        if command -v apt-get >/dev/null 2>&1; then
          apt-get update && apt-get install -y gettext-base
        elif command -v brew >/dev/null 2>&1; then
          brew install gettext && brew link --force gettext
        else
          echo "No package manager to install envsubst; aborting"
          exit 1
        fi
      fi

      TAG="${BUILDKITE_COMMIT:0:7}"
      export ORDER_IMAGE="hackermonk/order:${TAG}"
      export PAYMENT_IMAGE="hackermonk/payment:${TAG}"
      echo "--- Using images: $ORDER_IMAGE, $PAYMENT_IMAGE"

      cd kubernetes
      for manifest in order-deployment.yaml payment-deployment.yaml mysql-deployment.yaml services.yaml; do
        [ -f "$manifest" ] || { echo "Missing $manifest"; exit 1; }
        envsubst < "$manifest" | kubectl apply -f -
      done

      echo "--- Deployment status"
      kubectl get pods -A
      kubectl get svc -A
