env:
  GO111MODULE: "on"
  GOFLAGS: "-mod=mod"
  CGO_ENABLED: "0"

steps:
  - label: ":wrench: Tooling & Cluster Sanity"
    command: |
      set -euo pipefail
      echo "--- Versions"
      docker --version
      kubectl version --client=true --output=yaml | sed -n '1,8p' || true
      minikube version || true
      echo "--- Current kube-context"
      kubectl config current-context
      # Hardcoded for M3 Mac (arm64)
      echo "--- Using arm64 for M3 Mac"
      echo "arch=arm64" > .bk-arch

  - label: ":docker: Build (compose tests' images)"
    command: |
      set -euo pipefail
      echo "--- Enable BuildKit"
      export DOCKER_BUILDKIT=1
      docker-compose -f docker-compose.ci.yml build --parallel
      docker system df -v || true

  - label: ":go: Test Services (mysql up, run tests, tear down)"
    command: |
      set -euo pipefail
      docker-compose -f docker-compose.ci.yml up -d mysql
      echo "--- Waiting for MySQL"
      sleep 25
      mkdir -p test-results
      echo "--- Order tests"
      docker run --rm \
        --network container:buildkite-secure-pipeline-mysql-1 \
        -e DB_HOST=localhost -e DB_PORT=3306 -e DB_USER=user -e DB_PASSWORD=password -e DB_NAME=orders \
        -v "$(pwd)/test-results:/test-results" \
        buildkite-secure-pipeline-order \
        sh -c "cd /app && go test -v ./... | tee /test-results/order-test-output.txt" || echo "Order tests failed but continuing..."
      echo "--- Payment tests"
      docker run --rm \
        --network container:buildkite-secure-pipeline-mysql-1 \
        -e DB_HOST=localhost -e DB_PORT=3306 -e DB_USER=user -e DB_PASSWORD=password -e DB_NAME=payments \
        -v "$(pwd)/test-results:/test-results" \
        buildkite-secure-pipeline-payment \
        sh -c "cd /app && go test -v ./... | tee /test-results/payment-test-output.txt" || echo "Payment tests failed but continuing..."
      echo "--- Test Results"
      cat test-results/*.txt || true
      echo "--- Cleanup"
      docker-compose -f docker-compose.ci.yml down -v

  - label: ":package: Build k8s images for Minikube"
    command: |
      set -euo pipefail
      export TAG="${BUILDKITE_COMMIT:0:7}"
      export GOARCH="arm64"
      
      echo "--- System Info"
      uname -a
      docker version
      
      echo "--- Building with GOARCH=$GOARCH TAG=$TAG"
      
      # Build Order Service
      echo "--- Building Order Service"
      docker build \
        --build-arg GOARCH="$GOARCH" \
        -t hackermonk/order:${TAG} \
        -t hackermonk/order:dev \
        -f order/Dockerfile \
        .
        
      # Build Payment Service
      echo "--- Building Payment Service"
      docker build \
        --build-arg GOARCH="$GOARCH" \
        -t hackermonk/payment:${TAG} \
        -t hackermonk/payment:dev \
        -f payment/Dockerfile \
        .
        
      echo "--- Built Images"
      docker images | grep -E 'hackermonk/(order|payment)'
      echo "--- Local images:"
      docker images | grep -E 'hackermonk/(order|payment)'

  - label: ":minikube: Load images into cluster"
    command: |
      set -euo pipefail
      TAG="${BUILDKITE_COMMIT:0:7}"
      minikube image load --overwrite=true hackermonk/order:${TAG}
      minikube image load --overwrite=true hackermonk/payment:${TAG}
      minikube image load --overwrite=true hackermonk/order:dev
      minikube image load --overwrite=true hackermonk/payment:dev

  - label: ":kubernetes: Create Namespaces"
    command: |
      set -euo pipefail
      echo "--- Creating namespaces"
      kubectl apply -f kubernetes/namespaces.yaml

  - label: ":kubernetes: Deploy MySQL"
    command: |
      set -euo pipefail
      echo "--- Deploying MySQL"
      kubectl apply -f kubernetes/mysql-deployment.yaml
      kubectl apply -f <(sed 's/namespace: mysql//g' kubernetes/services.yaml | grep -A 10 'name: mysql')

  - label: ":kubernetes: Deploy Order Service"
    command: |
      set -euo pipefail
      echo "--- Deploying Order Service"
      kubectl apply -f kubernetes/order-deployment.yaml
      kubectl apply -f <(sed -n '/name: order/,/---/p' kubernetes/services.yaml | grep -v '^---$' | sed 's/namespace: order//g')

  - label: ":kubernetes: Deploy Payment Service"
    command: |
      set -euo pipefail
      echo "--- Deploying Payment Service"
      kubectl apply -f kubernetes/payment-deployment.yaml
      kubectl apply -f <(sed -n '/name: payment/,/---/p' kubernetes/services.yaml | grep -v '^---$' | sed 's/namespace: payment//g')

  - label: ":kubernetes: Deploy Ingress"
    command: |
      set -euo pipefail
      echo "--- Deploying Ingress"
      kubectl apply -f <(grep -A 100 'name: microservices-ingress' kubernetes/services.yaml)

  - label: ":kubernetes: Deploy (no registry)"
    command: |
      set -euo pipefail
      TAG="${BUILDKITE_COMMIT:0:7}"
      export ORDER_IMAGE="hackermonk/order:${TAG}"
      export PAYMENT_IMAGE="hackermonk/payment:${TAG}"
      echo "--- Using images:"
      echo "  $ORDER_IMAGE"
      echo "  $PAYMENT_IMAGE"
      if ! command -v envsubst >/dev/null 2>&1; then
        if command -v apt-get >/dev/null 2>&1; then
          sudo apt-get update && sudo apt-get install -y gettext-base
        elif command -v brew >/dev/null 2>&1; then
          brew install gettext && brew link --force gettext
        else
          echo "envsubst not available and no package manager found"; exit 1
        fi
      fi
      cd kubernetes
      for m in mysql-deployment.yaml order-deployment.yaml payment-deployment.yaml services.yaml; do
        [ -f "$m" ] || { echo "Missing $m"; exit 1; }
        envsubst < "$m" | kubectl apply -f -
      done
      echo "--- Rollout status"
      kubectl rollout status deploy/order --timeout=90s || true
      kubectl rollout status deploy/payment --timeout=90s || true
      echo "--- Pods"
      kubectl get pods -o wide
