env:
  GO111MODULE: "on"
  GOFLAGS: "-mod=mod"
  CGO_ENABLED: "0"

steps:
  - label: ":wrench: Tooling & Context"
    command: |
      set -euo pipefail
      echo "--- Versions"
      docker --version
      kubectl version --client=true --output=yaml | sed -n '1,8p' || true
      minikube version || true
      echo "--- Current kube-context"
      kubectl config current-context || true

      echo "--- Decide architecture"
      # Hardcode for M3 (arm64); switch to detection later if you want
      echo "arch=arm64" > .bk-arch
      cat .bk-arch

      echo "--- Decide tag"
      TAG=""
      if [ -n "${BUILDKITE_COMMIT:-}" ]; then
        # avoid ${VAR:0:7}; use cut instead
        TAG="$(printf %s "$BUILDKITE_COMMIT" | cut -c1-7)"
      elif git rev-parse --is-inside-work-tree >/dev/null 2>&1; then
        TAG="$(git rev-parse --short HEAD)"
      else
        TAG="local-$(date +%s)"
      fi
      # sanitize without ${var//…/…}
      TAG="$(printf %s "$TAG" | tr -c 'A-Za-z0-9_.-' '-')"
      [ -n "$TAG" ] || { echo "FATAL: computed TAG is empty"; exit 1; }
      echo "tag=$TAG" > .bk-tag
      echo "Using TAG=$TAG"

  - label: ":docker: Build (compose tests' images)"
    command: |
      set -euo pipefail
      echo "--- Enable BuildKit"
      export DOCKER_BUILDKIT=1
      docker-compose -f docker-compose.ci.yml build --parallel
      docker system df -v || true

  - label: ":go: Test Services (mysql up, run tests, tear down)"
    command: |
      set -euo pipefail
      docker-compose -f docker-compose.ci.yml up -d mysql
      echo "--- Waiting for MySQL"
      sleep 25
      mkdir -p test-results

      echo "--- Order tests"
      docker run --rm \
        --network container:buildkite-secure-pipeline-mysql-1 \
        -e DB_HOST=localhost -e DB_PORT=3306 -e DB_USER=user -e DB_PASSWORD=password -e DB_NAME=orders \
        -v "$(pwd)/test-results:/test-results" \
        buildkite-secure-pipeline-order \
        sh -c "cd /app && go test -v ./... | tee /test-results/order-test-output.txt" || echo "Order tests failed but continuing..."

      echo "--- Payment tests"
      docker run --rm \
        --network container:buildkite-secure-pipeline-mysql-1 \
        -e DB_HOST=localhost -e DB_PORT=3306 -e DB_USER=user -e DB_PASSWORD=password -e DB_NAME=payments \
        -v "$(pwd)/test-results:/test-results" \
        buildkite-secure-pipeline-payment \
        sh -c "cd /app && go test -v ./... | tee /test-results/payment-test-output.txt" || echo "Payment tests failed but continuing..."

      echo "--- Test Results"
      cat test-results/*.txt || true

      echo "--- Cleanup"
      docker-compose -f docker-compose.ci.yml down -v

  - label: ":package: Build k8s images for Minikube"
    command: |
      set -euo pipefail
      ARCH="$(sed -n 's/^arch=//p' .bk-arch)"
      TAG="$(sed -n 's/^tag=//p' .bk-tag)"
      [ -n "$ARCH" ] || { echo "FATAL: .bk-arch missing"; exit 1; }
      [ -n "$TAG" ]  || { echo "FATAL: .bk-tag missing"; exit 1; }

      case "$ARCH" in
        arm64)      PLATFORM="linux/arm64"; GOARCH="arm64" ;;
        amd64|x86_64) PLATFORM="linux/amd64"; GOARCH="amd64" ;;
        *) echo "Unknown arch '$ARCH'"; exit 1 ;;
      esac

      echo "--- Using PLATFORM=$PLATFORM GOARCH=$GOARCH TAG=$TAG"
      docker buildx create --use --name bkx || docker buildx use bkx

      echo "--- Build Order"
      docker buildx build \
        --platform "$PLATFORM" \
        --build-arg GOARCH="$GOARCH" \
        -t "hackermonk/order:$TAG" \
        -t "hackermonk/order:dev" \
        -f order/Dockerfile order \
        --load

      echo "--- Build Payment"
      docker buildx build \
        --platform "$PLATFORM" \
        --build-arg GOARCH="$GOARCH" \
        -t "hackermonk/payment:$TAG" \
        -t "hackermonk/payment:dev" \
        -f payment/Dockerfile payment \
        --load

      echo "--- Local images"
      docker images | grep -E 'hackermonk/(order|payment)'

  - label: ":minikube: Load images into cluster"
    command: |
      set -euo pipefail
      TAG="$(sed -n 's/^tag=//p' .bk-tag)"
      echo "--- Loading images with tag: $TAG"
      minikube image load --overwrite=true "hackermonk/order:$TAG"
      minikube image load --overwrite=true "hackermonk/payment:$TAG"
      # Optional dev tags:
      minikube image load --overwrite=true hackermonk/order:dev
      minikube image load --overwrite=true hackermonk/payment:dev

  - label: ":kubernetes: Deploy (no registry)"
    command: |
      set -euo pipefail
      TAG="$(sed -n 's/^tag=//p' .bk-tag)"
      export ORDER_IMAGE="hackermonk/order:$TAG"
      export PAYMENT_IMAGE="hackermonk/payment:$TAG"
      echo "--- Using images:"
      echo "  $ORDER_IMAGE"
      echo "  $PAYMENT_IMAGE"

      if ! command -v envsubst >/dev/null 2>&1; then
        if command -v apt-get >/dev/null 2>&1; then
          sudo apt-get update && sudo apt-get install -y gettext-base
        elif command -v brew >/dev/null 2>&1; then
          brew install gettext
        else
          echo "envsubst not available and no package manager found"; exit 1
        fi
      fi

      cd kubernetes
      for m in mysql-deployment.yaml order-deployment.yaml payment-deployment.yaml services.yaml; do
        [ -f "$m" ] || { echo "Missing $m"; exit 1; }
        echo "--- Applying $m"
        envsubst < "$m" | kubectl apply -f -
      done

      echo "--- Rollout status"
      kubectl rollout status deploy/order --timeout=90s || true
      kubectl rollout status deploy/payment --timeout=90s || true
      echo "--- Pods"
      kubectl get pods -o wide
